<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on { bit.therapy }</title>
    <link>/tags/powershell/</link>
    <description>Recent content in PowerShell on { bit.therapy }</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>_</copyright>
    <lastBuildDate>Mon, 01 Feb 2016 15:21:12 +0000</lastBuildDate>
    
	<atom:link href="/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Transfer Files To and From Sandboxed Guest on Hyper-V</title>
      <link>/post/transfer-files-to-and-from-guest-on-hyper-v/</link>
      <pubDate>Mon, 01 Feb 2016 15:21:12 +0000</pubDate>
      
      <guid>/post/transfer-files-to-and-from-guest-on-hyper-v/</guid>
      <description>One of the things I missed after switching from VMware to Hyper-V is the ability to copy-paste files from host to guest via the interface.
The workaround for Hyper-V (at this time) is to use either RDP or SMB to transfer files. This is just fine for most configurations but for me this would not work.
I was setting a VM as a sandbox for malware analysis and therefore I would not be able to leverage network based protocols to transfer files.</description>
    </item>
    
    <item>
      <title>Batch file rename with PowerShell and Regular Expressions</title>
      <link>/post/batch-file-rename-with-powershell-and-regular-expressions/</link>
      <pubDate>Mon, 06 Apr 2015 16:54:42 +0000</pubDate>
      
      <guid>/post/batch-file-rename-with-powershell-and-regular-expressions/</guid>
      <description>There have been a few times in the past where I&amp;rsquo;ve had to rename a large number of files for various reasons (ie: remove a common piece of text from the name) and I&amp;rsquo;ve always defaulted to PowerShell.
Piping dir into a where and matching the files I wanted to rename was effective but tedious. Cue the mass_rename.ps1 script:
$ext = $args[0]; $dir = $args[1]; $what = $args[2]; $with = $args[3]; $whatif = $args[4]; $count = 0; if ($args.</description>
    </item>
    
  </channel>
</rss>